// biz-web-app/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  active
  inactive
  deleted
}

enum UserRole {
  superadmin
  admin
  supervisor
  employee
}

enum LeaveStatus {
  pending
  approved
  rejected
}

model User {
  id           String     @id @default(cuid())
  username     String     @unique
  email        String
  password     String
  profileId    String
  companyId    String?
  departmentId String?
  role         UserRole   @default(admin)
  status       UserStatus @default(active)
  createdAt    DateTime   @default(now()) @db.Timestamptz
  updatedAt    DateTime   @updatedAt @db.Timestamptz

  profile             UserProfile           @relation(fields: [profileId], references: [id])
  company             Company?              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  department          Department?           @relation(fields: [departmentId], references: [id])
  UserRate            UserRate[]
  Deduction           Deduction[]
  Payroll             Payroll[]
  TimeLog             TimeLog[]
  LocationRestriction LocationRestriction[]
  UserActivity        UserActivity[]
  UserShift           UserShift[]
  Leave               Leave[]
  ApprovedLeaves      Leave[]               @relation("approver")
  Subscription        Subscription[]
}

model UserProfile {
  id          String   @id @default(cuid())
  username    String   @unique
  email       String
  firstName   String?
  lastName    String?
  phoneNumber String?
  createdAt   DateTime @default(now()) @db.Timestamptz
  updatedAt   DateTime @default(now()) @db.Timestamptz

  User User[]
}

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  userId    String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @db.Timestamptz

  Department   Department[]
  User         User[]
  Tax          Tax[]
  Location     Location[]
  Shift        Shift[]
  Subscription Subscription[]
}

model Department {
  id        String   @id @default(cuid())
  companyId String
  name      String
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @db.Timestamptz

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  User    User[]
}

model UserRate {
  id         String   @id @default(cuid())
  userId     String
  hourlyRate Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now()) @db.Timestamptz
  updatedAt  DateTime @default(now()) @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tax {
  id        String   @id @default(cuid())
  companyId String
  taxName   String
  taxRate   Decimal  @db.Decimal(5, 2)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @db.Timestamptz

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Deduction {
  id            String   @id @default(cuid())
  userId        String
  deductionName String
  amount        Decimal  @db.Decimal(10, 2)
  createdAt     DateTime @default(now()) @db.Timestamptz
  updatedAt     DateTime @default(now()) @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payroll {
  id          String   @id @default(cuid())
  userId      String
  grossSalary Decimal  @db.Decimal(10, 2)
  tax         Decimal  @db.Decimal(10, 2)
  deductions  Decimal  @db.Decimal(10, 2)
  netSalary   Decimal  @db.Decimal(10, 2)
  payrollDate DateTime @db.Timestamptz
  createdAt   DateTime @default(now()) @db.Timestamptz
  updatedAt   DateTime @default(now()) @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id          String   @id @default(cuid())
  companyName String
  email       String
  amount      Decimal  @db.Decimal(10, 2)
  paymentDate DateTime @default(now()) @db.Timestamptz
  createdAt   DateTime @default(now()) @db.Timestamptz
  updatedAt   DateTime @default(now()) @db.Timestamptz
}

model TimeLog {
  id        String      @id @default(cuid())
  userId    String
  timeIn    DateTime    @db.Timestamptz
  timeOut   DateTime?   @db.Timestamptz
  status    LeaveStatus @default(pending)
  createdAt DateTime    @default(now()) @db.Timestamptz
  updatedAt DateTime    @default(now()) @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Location {
  id        String   @id @default(cuid())
  companyId String
  latitude  Decimal  @db.Decimal(9, 6)
  longitude Decimal  @db.Decimal(9, 6)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @db.Timestamptz

  company             Company               @relation(fields: [companyId], references: [id])
  LocationRestriction LocationRestriction[]
}

model LocationRestriction {
  id                String   @id @default(cuid())
  userId            String
  locationId        String
  restrictionStatus Boolean  @default(true)
  createdAt         DateTime @default(now()) @db.Timestamptz
  updatedAt         DateTime @default(now()) @db.Timestamptz

  user     User     @relation(fields: [userId], references: [id])
  location Location @relation(fields: [locationId], references: [id])
}

model UserActivity {
  id                  String   @id @default(cuid())
  userId              String
  activityDescription String
  createdAt           DateTime @default(now()) @db.Timestamptz

  user User @relation(fields: [userId], references: [id])
}

model Shift {
  id        String   @id @default(cuid())
  companyId String
  shiftName String
  startTime DateTime @db.Time
  endTime   DateTime @db.Time
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @db.Timestamptz

  company   Company     @relation(fields: [companyId], references: [id])
  UserShift UserShift[]
}

model UserShift {
  id           String   @id @default(cuid())
  userId       String
  shiftId      String
  assignedDate DateTime @db.Timestamptz
  createdAt    DateTime @default(now()) @db.Timestamptz
  updatedAt    DateTime @default(now()) @db.Timestamptz

  user            User              @relation(fields: [userId], references: [id])
  shift           Shift             @relation(fields: [shiftId], references: [id])
  ShiftRecurrence ShiftRecurrence[]
}

model ShiftRecurrence {
  id                String   @id @default(cuid())
  userShiftId       String
  recurrencePattern String
  createdAt         DateTime @default(now()) @db.Timestamptz
  updatedAt         DateTime @default(now()) @db.Timestamptz

  userShift UserShift @relation(fields: [userShiftId], references: [id])
}

model Leave {
  id         String   @id @default(cuid())
  userId     String
  approverId String?
  leaveType  String
  startDate  DateTime @db.Timestamptz
  endDate    DateTime @db.Timestamptz
  status     String   @default("pending")
  createdAt  DateTime @default(now()) @db.Timestamptz
  updatedAt  DateTime @default(now()) @db.Timestamptz

  approver User? @relation("approver", fields: [approverId], references: [id])
  User     User  @relation(fields: [userId], references: [id])
}

model SubscriptionPlan {
  id           String   @id @default(cuid())
  name         String
  rangeOfUsers String
  description  String?
  price        Decimal  @db.Decimal(10, 2)
  features     Json
  createdAt    DateTime @default(now()) @db.Timestamptz
  updatedAt    DateTime @default(now()) @db.Timestamptz

  Subscription Subscription[]
}

model Subscription {
  id        String    @id @default(cuid())
  userId    String
  companyId String
  planId    String
  startDate DateTime  @default(now()) @db.Timestamptz
  endDate   DateTime? @db.Timestamptz
  active    Boolean   @default(true)
  createdAt DateTime  @default(now()) @db.Timestamptz
  updatedAt DateTime  @default(now()) @db.Timestamptz

  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  plan    SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
}
